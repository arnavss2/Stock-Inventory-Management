/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package stockinventorymanagement;

import java.awt.Color;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Anish
 */
public class exploreItem extends javax.swing.JFrame {

    /** Creates new form searchItem */
    public exploreItem() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/images/logo.png")).getImage());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btncat = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        txtcrit = new javax.swing.JTextField();
        cbcrit = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cbsrch = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cbop = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        btnempty = new javax.swing.JButton();
        btnsrch = new javax.swing.JButton();
        scritem = new javax.swing.JScrollPane();
        tblitem = new javax.swing.JTable();
        pnledit = new javax.swing.JPanel();
        txtmin = new javax.swing.JTextField();
        lblitem = new javax.swing.JLabel();
        txtmax = new javax.swing.JTextField();
        lblven = new javax.swing.JLabel();
        chkref = new javax.swing.JCheckBox();
        lblcat = new javax.swing.JLabel();
        cbven = new javax.swing.JComboBox<>();
        btnedit = new javax.swing.JButton();
        lblmin = new javax.swing.JLabel();
        rbs = new javax.swing.JRadioButton();
        rbns = new javax.swing.JRadioButton();
        btnsave = new javax.swing.JButton();
        lblmax = new javax.swing.JLabel();
        txtitem = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        sep = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Explore Item Master");
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(900, 675));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 675));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(214, 223, 245));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new javax.swing.OverlayLayout(jPanel1));

        txtcrit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcritKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtcritKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcritKeyTyped(evt);
            }
        });
        jPanel1.add(txtcrit);

        cbcrit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cbcritKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbcritKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cbcritKeyTyped(evt);
            }
        });
        jPanel1.add(cbcrit);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 54, 673, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(62, 53, 171));
        jLabel2.setText("Search Field");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 16, -1, -1));

        cbsrch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Field", "itemName", "category", "vendor", "refrigeration", "minQty", "maxQty" }));
        cbsrch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbsrchItemStateChanged(evt);
            }
        });
        cbsrch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbsrchActionPerformed(evt);
            }
        });
        getContentPane().add(cbsrch, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 58, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(62, 53, 171));
        jLabel3.setText("Criteria");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 16, -1, -1));

        cbop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<", ">=", "<=", "!=" }));
        getContentPane().add(cbop, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 58, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 102, 870, 10));

        btnempty.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnempty.setText("Empty Table");
        btnempty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnemptyActionPerformed(evt);
            }
        });
        getContentPane().add(btnempty, new org.netbeans.lib.awtextra.AbsoluteConstraints(272, 121, -1, -1));

        btnsrch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnsrch.setText("Search in the database");
        btnsrch.setEnabled(false);
        btnsrch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsrchActionPerformed(evt);
            }
        });
        getContentPane().add(btnsrch, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 121, -1, -1));

        tblitem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sr. No.", "Item Name", "Category", "Vendor", "Refrigeration", "Minimum Qty.", "Maximum Qty."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblitem.setOpaque(false);
        tblitem.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scritem.setViewportView(tblitem);

        getContentPane().add(scritem, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 170, 870, 210));

        pnledit.setBackground(new java.awt.Color(141, 230, 247));
        pnledit.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit Item Master"));

        txtmin.setEnabled(false);
        txtmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtminActionPerformed(evt);
            }
        });

        lblitem.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblitem.setForeground(new java.awt.Color(62, 53, 171));
        lblitem.setText("Item Name :");

        txtmax.setEnabled(false);

        lblven.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblven.setForeground(new java.awt.Color(62, 53, 171));
        lblven.setText("Vendor :");

        chkref.setBackground(new java.awt.Color(140, 170, 230));
        chkref.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        chkref.setForeground(new java.awt.Color(62, 53, 171));
        chkref.setText("Refrigeration");
        chkref.setEnabled(false);
        chkref.setOpaque(false);

        lblcat.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblcat.setForeground(new java.awt.Color(62, 53, 171));
        lblcat.setText("Category :");

        cbven.setEnabled(false);

        btnedit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnedit.setText("Edit Details");
        btnedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneditActionPerformed(evt);
            }
        });

        lblmin.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblmin.setForeground(new java.awt.Color(62, 53, 171));
        lblmin.setText("Minimum Quantity :");

        rbs.setBackground(new java.awt.Color(140, 170, 230));
        btncat.add(rbs);
        rbs.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rbs.setForeground(new java.awt.Color(62, 53, 171));
        rbs.setText("Surgical");
        rbs.setEnabled(false);
        rbs.setOpaque(false);

        rbns.setBackground(new java.awt.Color(140, 170, 230));
        btncat.add(rbns);
        rbns.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rbns.setForeground(new java.awt.Color(62, 53, 171));
        rbns.setText("Non-Surgical");
        rbns.setEnabled(false);
        rbns.setOpaque(false);

        btnsave.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnsave.setText("Save Changes");
        btnsave.setEnabled(false);
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });

        lblmax.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblmax.setForeground(new java.awt.Color(62, 53, 171));
        lblmax.setText("Maximum Quantity :");

        txtitem.setEditable(false);
        txtitem.setEnabled(false);

        javax.swing.GroupLayout pnleditLayout = new javax.swing.GroupLayout(pnledit);
        pnledit.setLayout(pnleditLayout);
        pnleditLayout.setHorizontalGroup(
            pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnleditLayout.createSequentialGroup()
                .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnleditLayout.createSequentialGroup()
                        .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblitem)
                            .addComponent(lblcat))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnleditLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblven)
                        .addGap(49, 49, 49)))
                .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbven, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnleditLayout.createSequentialGroup()
                        .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnleditLayout.createSequentialGroup()
                                .addComponent(rbs)
                                .addGap(32, 32, 32)
                                .addComponent(rbns))
                            .addComponent(txtitem, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkref)
                    .addGroup(pnleditLayout.createSequentialGroup()
                        .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblmin)
                            .addComponent(lblmax))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtmin, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(txtmax))))
                .addGap(109, 109, 109))
            .addGroup(pnleditLayout.createSequentialGroup()
                .addComponent(btnsave, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnleditLayout.createSequentialGroup()
                    .addGap(5, 5, 5)
                    .addComponent(btnedit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(792, Short.MAX_VALUE)))
        );
        pnleditLayout.setVerticalGroup(
            pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnleditLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblitem)
                    .addComponent(chkref)
                    .addComponent(txtitem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblcat)
                    .addComponent(rbs)
                    .addComponent(rbns)
                    .addComponent(lblmin)
                    .addComponent(txtmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbven, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblven)
                    .addComponent(lblmax)
                    .addComponent(txtmax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(btnsave))
            .addGroup(pnleditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnleditLayout.createSequentialGroup()
                    .addGap(8, 8, 8)
                    .addComponent(btnedit)
                    .addContainerGap(182, Short.MAX_VALUE)))
        );

        getContentPane().add(pnledit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 870, 250));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        getContentPane().add(sep, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 880, 10));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/nisarg900.jpg"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 675));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbcritKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbcritKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_cbcritKeyPressed

    private void cbcritKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbcritKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_cbcritKeyReleased

    private void cbcritKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbcritKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_cbcritKeyTyped

    private void cbsrchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbsrchItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_cbsrchItemStateChanged

    private void cbsrchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbsrchActionPerformed
        // TODO add your handling code here:
        String sfld = (String) cbsrch.getSelectedItem();
        if(sfld.equals("Select Field"))
        {
            btnsrch.setEnabled(false);
            txtcrit.setVisible(false);            
            cbop.setVisible(false);
            cbcrit.setVisible(false);
            DefaultTableModel model = (DefaultTableModel) tblitem.getModel();
            while (model.getRowCount()>0)
            model.removeRow(0);
        }        
        else if(sfld.equals("itemName"))
        {
            btnsrch.setEnabled(true);
            cbcrit.setVisible(true);
            txtcrit.setVisible(false);            
            cbop.setVisible(false);
            cbcrit.removeAllItems();
            try
            {
                Class.forName("java.sql.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost/stockinventorymanagement","root","tabla10a");
                Statement stmt = con.createStatement();
                String s = "select itemName from itemmaster;";
                ResultSet rs = stmt.executeQuery(s);
                while(rs.next())
                {
                    String itemName = rs.getString("itemName");
                    cbcrit.addItem(itemName);
                }
                rs.close();
                stmt.close();
                con.close();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if(sfld.equals("category"))
        {
            btnsrch.setEnabled(true);
            cbcrit.setVisible(true);
            txtcrit.setVisible(false);
            cbop.setVisible(false);
            cbcrit.removeAllItems();
            cbcrit.addItem("Surgical");
            cbcrit.addItem("Non-Surgical");            
        }
        else if(sfld.equals("vendor"))
        {
            btnsrch.setEnabled(true);
            cbcrit.setVisible(true);
            txtcrit.setVisible(false);
            cbop.setVisible(false);
            cbcrit.removeAllItems();
            try
            {
                Class.forName("java.sql.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost/stockinventorymanagement","root","tabla10a");
                Statement stmt = con.createStatement();
                String query="SELECT DISTINCT VENDOR FROM ITEMMASTER ORDER BY VENDOR;";
                ResultSet rs=stmt.executeQuery(query);
                while (rs.next())
                {
                    String vendor = rs.getString("vendor");
                    cbcrit.addItem(vendor);
                }
                rs.close();
                stmt.close();
                con.close();                        
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null,e);
            }
        }            
        else if(sfld.equals("refrigeration"))
        {
            btnsrch.setEnabled(true);
            cbop.setVisible(false);
            txtcrit.setVisible(false);
            cbcrit.setVisible(true);
            cbcrit.removeAllItems();
            cbcrit.addItem("Yes");
            cbcrit.addItem("No");            
        }
        else
        {            
            txtcrit.setText("");
            if(txtcrit.getText().equals(""))
            {
                btnsrch.setEnabled(false);
            }
            else
            {
                btnsrch.setEnabled(true);
            }
            cbcrit.setVisible(false);
            txtcrit.setVisible(true);
            cbop.setVisible(true);            
            
        }
    }//GEN-LAST:event_cbsrchActionPerformed

    private void btnemptyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnemptyActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblitem.getModel();
        int rows = model.getRowCount();
        //Now remove all the rows from the current table model
        if (rows>0)
        {
            for(int i = 0; i<rows;i++)
            {
                model.removeRow(0);
            }
        }
    }//GEN-LAST:event_btnemptyActionPerformed

    private void btnsrchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsrchActionPerformed
        // TODO add your handling code here:
        btnempty.doClick();
        DefaultTableModel model = (DefaultTableModel) tblitem.getModel();
        int x,c=0;
        String qty=txtcrit.getText();
        int qtylength = qty.length();
        for(x=0;x<qtylength;x++)
        {
            char a = qty.charAt(x);
            if(a<=57&&a>=48)
            {
                continue;
            }
            else
            {
                c++;
            }
        }                        
        if(c!=0)
        {
            JOptionPane.showMessageDialog(null,"Enter numbers to search for Quantities!");
        }
        else
        {                
            try
            { 
                Class.forName("java.sql.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost/stockinventorymanagement","root","tabla10a");
                Statement stmt = con.createStatement();
                String sfld = (String) cbsrch.getSelectedItem();
                String crit,query;
                if(sfld.equals("itemName")||sfld.equals("category")||sfld.equals("vendor")||sfld.equals("refrigeration"))
                {
                    crit = (String) cbcrit.getSelectedItem();
                    query = "select * from itemmaster where "+sfld+" = '"+crit+"' ;";
                }
                else
                {
                    crit = txtcrit.getText();
                    String crit1 = (String) cbop.getSelectedItem();
                    query = "select * from itemmaster where "+sfld+crit1+crit+" ;";
                }
                ResultSet rs = stmt.executeQuery(query);
                for(int r = 1;rs.next();r++)
                {
                    String itemname = rs.getString("itemname");
                    String cat = rs.getString("category");
                    String ven = rs.getString("vendor");
                    String ref = rs.getString("refrigeration");
                    String min = rs.getString("minqty");
                    String max = rs.getString("maxqty");
                    model.addRow(new Object[] {r,itemname,cat,ven,ref,min,max});
                }
                rs.close();
                stmt.close();
                con.close();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null,e);
            }
        }        
    }//GEN-LAST:event_btnsrchActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try
        {
            Class.forName("java.sql.Driver");   
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/stockinventorymanagement","root","tabla10a");
            Statement stmt = con.createStatement();
            String query = "select * from login";
            ResultSet rs = stmt.executeQuery(query);
            rs.next();
            String user = rs.getString("username");            
            if(user.equals("Admin"))
            {
                String q = "select*from access;";
                ResultSet rs1 = stmt.executeQuery(q);
                while(rs1.next())
                {
                    String f = rs1.getString("feature");                    
                    if(f.equals("edit"))
                    {
                        pnledit.setEnabled(true);
                    }
                    else
                    {
                        sep.setVisible(false);
                        pnledit.setEnabled(false);
                        this.setSize(900,430);
                    }
                }
                rs1.close();
            }
            rs.close();
            stmt.close();
            con.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
        Color s=new Color(214,223,245);
        scritem.getViewport().setBackground(s);
        txtcrit.setVisible(false);        
        cbop.setVisible(false);
        cbcrit.setVisible(false);
        txtitem.setDisabledTextColor(Color.black);
        txtitem.setBackground(Color.white);
        txtmin.setDisabledTextColor(Color.black);
        txtmin.setBackground(Color.white);
        txtmax.setDisabledTextColor(Color.black);
        txtmax.setBackground(Color.white);
    }//GEN-LAST:event_formWindowOpened

    private void txtcritKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcritKeyPressed
        // TODO add your handling code here:
        if(txtcrit.getText().equals(""))
            {
                btnsrch.setEnabled(false);
            }
            else
            {
                btnsrch.setEnabled(true);
            }
    }//GEN-LAST:event_txtcritKeyPressed

    private void txtcritKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcritKeyReleased
        // TODO add your handling code here:
        if(txtcrit.getText().equals(""))
            {
                btnsrch.setEnabled(false);
            }
            else
            {
                btnsrch.setEnabled(true);
            }
    }//GEN-LAST:event_txtcritKeyReleased

    private void txtcritKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcritKeyTyped
        // TODO add your handling code here:
        if(txtcrit.getText().equals(""))
            {
                btnsrch.setEnabled(false);
            }
            else
            {
                btnsrch.setEnabled(true);
            }
    }//GEN-LAST:event_txtcritKeyTyped

    private void txtminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtminActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtminActionPerformed

    private void btneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneditActionPerformed
        // TODO add your handling code here:
        if(tblitem.getSelectionModel().isSelectionEmpty())
        {
            JOptionPane.showMessageDialog(null,"Please select a row from the Table to Edit.");
        }
        else
        {
            btnsave.setEnabled(true);
            rbs.setEnabled(true);
            rbns.setEnabled(true);
            txtitem.setEnabled(true);
            cbven.setEnabled(true);
            chkref.setEnabled(true);
            txtmin.setEnabled(true);
            txtmax.setEnabled(true);
            DefaultTableModel model=(DefaultTableModel) tblitem.getModel();
            int i = tblitem.getSelectedRow();
            txtitem.setText(model.getValueAt(i,1).toString());
            String cat = model.getValueAt(i,2).toString();
            if(cat.equals("Surgical"))
            {
                rbs.setSelected(true);
            }
            else if(cat.equals("Non-Surgical"))
            {
                rbns.setSelected(true);
            }
            cbven.removeAllItems();
            try
            {
                Class.forName("java.sql.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost/stockinventorymanagement","root","tabla10a");
                Statement stmt = con.createStatement();
                String query = "SELECT vendorName FROM vendorMaster ORDER BY VENDORNAME;";
                ResultSet rs = stmt.executeQuery(query);
                while(rs.next())
                {
                    String vName = rs.getString(1);
                    cbven.addItem(vName);
                }
                rs.close();
                stmt.close();
                con.close();
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
            String ven=(String)model.getValueAt(i, 3);
            int i1=0;
            int length=cbven.getItemCount();
            boolean exists=false;
            for(;i1<length;i1++)
            {
                String item=(String)cbven.getItemAt(i1);
                if(item.equals(ven))
                {
                    exists=true;
                    break;
                }
            }
            if(exists==false)
            {
                cbven.addItem(ven);
            }
            cbven.setSelectedItem(ven);
            cbven.setSelectedItem(model.getValueAt(i,3).toString());
            String ref=model.getValueAt(i,4).toString();
            if(ref.equals("Yes"))
            {
                chkref.setSelected(true);
            }
            else if(ref.equals("No"))
            {
                chkref.setSelected(false);
            }
            txtmin.setText(model.getValueAt(i,5).toString());
            txtmax.setText(model.getValueAt(i,6).toString());
        }
    }//GEN-LAST:event_btneditActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        // TODO add your handling code here:
        String item=txtitem.getText();
        String cat="Non-Surgical";
        if(rbs.isSelected())
        {
            cat="Surgical";
        }
        String ven=(String)cbven.getSelectedItem();
        String ref="No";
        if(chkref.isSelected())
        {
            ref="Yes";
        }
        String min=txtmin.getText();
        String max=txtmax.getText();
        if(min.equals("")||max.equals(""))
        {
            JOptionPane.showMessageDialog(null,"Please fill in the required quantity(ies)!");
        }
        else
        {
            int x,c=0;
            int minlength = min.length();
            for(x=0;x<minlength;x++)
            {
                char a = min.charAt(x);
                if(a<=57&&a>=48)
                {
                    continue;
                }
                else
                {
                    c++;
                }
            }
            int maxlength = max.length();
            for(x=0;x<maxlength;x++)
            {
                char a = max.charAt(x);
                if(a<=57&&a>=48)
                {
                    continue;
                }
                else
                {
                    c++;
                }
            }
            if(c!=0)
            {
                JOptionPane.showMessageDialog(null,"Enter numbers in Minimum Quantity and Maximum Quantity!");
            }
            else
            {
                int mini=Integer.parseInt(min);
                int maxi=Integer.parseInt(max);
                if(mini>=maxi)
                {
                    JOptionPane.showMessageDialog(null,"Minimum Quantity must be less than Maximum Quantity!");
                }
                else
                {
                    try
                    {
                        Class.forName("java.sql.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/stockinventorymanagement","root","tabla10a");
                        Statement stmt = con.createStatement();
                        String update="UPDATE itemmaster set category='"+cat+"',vendor='"+ven+"',refrigeration='"+ref+"', minqty='"+min+"', maxqty='"+max+"' where itemname='"+item+"';";
                        stmt.executeUpdate(update);
                        txtitem.setText("");
                        txtitem.setEnabled(false);
                        chkref.setSelected(false);
                        chkref.setEnabled(false);
                        btncat.clearSelection();
                        rbs.setEnabled(false);
                        rbns.setEnabled(false);
                        cbven.removeAllItems();
                        cbven.setEnabled(false);
                        txtmin.setText("");
                        txtmax.setText("");
                        txtmin.setEnabled(false);
                        txtmax.setEnabled(false);
                        btnsave.setEnabled(false);
                        DefaultTableModel model = ( DefaultTableModel) tblitem.getModel();
                        String query = "Select * from itemmaster order by itemname ;";
                        ResultSet rs = stmt.executeQuery(query);
                        while (model.getRowCount()>0)
                        model.removeRow(0);
                        for(int r = 1;rs.next();r++)
                        {
                            String item1 = rs.getString("itemname");
                            String cat1 = rs.getString("category");
                            String ven1 = rs.getString("vendor");
                            String ref1= rs.getString("refrigeration");
                            String min1= rs.getString("minqty");
                            String max1= rs.getString("maxqty");
                            model.addRow(new Object[] {r,item1,cat1,ven1,ref1,min1,max1});
                        }
                        JOptionPane.showMessageDialog(null,"Record Updated successfully.");
                        stmt.close();
                        con.close();
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(null,e);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnsaveActionPerformed

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowIconified

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(exploreItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(exploreItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(exploreItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(exploreItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new exploreItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btncat;
    private javax.swing.JButton btnedit;
    private javax.swing.JButton btnempty;
    private javax.swing.JButton btnsave;
    private javax.swing.JButton btnsrch;
    private javax.swing.JComboBox<String> cbcrit;
    private javax.swing.JComboBox<String> cbop;
    private javax.swing.JComboBox<String> cbsrch;
    private javax.swing.JComboBox<String> cbven;
    private javax.swing.JCheckBox chkref;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblcat;
    private javax.swing.JLabel lblitem;
    private javax.swing.JLabel lblmax;
    private javax.swing.JLabel lblmin;
    private javax.swing.JLabel lblven;
    private javax.swing.JPanel pnledit;
    private javax.swing.JRadioButton rbns;
    private javax.swing.JRadioButton rbs;
    private javax.swing.JScrollPane scritem;
    private javax.swing.JSeparator sep;
    private javax.swing.JTable tblitem;
    private javax.swing.JTextField txtcrit;
    private javax.swing.JTextField txtitem;
    private javax.swing.JTextField txtmax;
    private javax.swing.JTextField txtmin;
    // End of variables declaration//GEN-END:variables

}
